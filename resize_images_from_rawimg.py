import os
import cv2
import numpy as np

# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
input_root = 'data/Raw-Img'  # ‡∏†‡∏≤‡∏û Input
output_root = 'data/Resize-Img-224'  # ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á Output
target_size = (224, 224)  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö

os.makedirs(output_root, exist_ok=True)

def resize_with_padding(img, target_size=(224, 224)):
    h, w = img.shape[:2]  # ‡∏î‡∏∂‡∏á ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤color channel)
    target_w, target_h = target_size # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô

    scale = min(target_w / w, target_h / h)  # min ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô   ‡πÅ‡∏•‡∏∞ aspect ratio ‡∏†‡∏≤‡∏û
    new_w, new_h = int(w * scale), int(h * scale)  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á resize ‡∏à‡∏≤‡∏Å 600*300 ‡πÄ‡∏õ‡πá‡∏ô 224*112

    resized_img = cv2.resize(img, (new_w, new_h), interpolation=cv2.INTER_AREA)  # ‡∏¢‡πà‡∏≠‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ cv2.INTER_AREA(interpolate(‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏´‡∏•‡∏±‡∏á‡∏¢‡πà‡∏≠))

    result = np.zeros((target_h, target_w), dtype=np.uint8)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡∏≥(‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô BG) uint8 ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö grayscale
    x_offset = (target_w - new_w) // 2
    y_offset = (target_h - new_h) // 2  # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
    result[y_offset:y_offset+new_h, x_offset:x_offset+new_w] = resized_img  ## ‡∏ß‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡∏ö‡∏ô‡∏†‡∏≤‡∏û‡∏™‡∏µ‡∏î‡∏≥

    return result # save

# loop ‡∏ú‡πà‡∏≤‡∏ô Train, Val, Test
for split in ['Train', 'Val', 'Test']:
    input_split_path = os.path.join(input_root, split)  #  ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÄ‡∏ä‡πà‡∏ô data/Raw-Img/Train
    output_split_path = os.path.join(output_root, split)  #  ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÄ‡∏ä‡πà‡∏ô data/Resize-Img-225/Train

    for id_folder in os.listdir(input_split_path):
        id_input_path = os.path.join(input_split_path, id_folder)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ID
        id_output_path = os.path.join(output_split_path, id_folder)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ID

        os.makedirs(id_output_path, exist_ok=True)  # ‡∏™‡∏£‡πâ‡∏≤‡∏á folder ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á resize

        for filename in os.listdir(id_input_path):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
                input_img_path = os.path.join(id_input_path, filename)
                output_img_path = os.path.join(id_output_path, filename)

                img = cv2.imread(input_img_path, cv2.IMREAD_GRAYSCALE)
                if img is None:
                    print(f"‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {input_img_path}")  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á  ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ crash
                    continue 

                processed_img = resize_with_padding(img, target_size)
                cv2.imwrite(output_img_path, processed_img)

print("‚úÖ Resize + Padding ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üîÑ")

